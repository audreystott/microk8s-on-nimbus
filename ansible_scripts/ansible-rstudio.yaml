---
- name: Add an RStudio application to existing Microk8s cluster
  hosts: localhost
  vars_prompt:
  - name: R_version
    prompt: "Enter the R version you require (supported versions are 3.6.3 and >= 4.0.0) - ensure it is available as a tag at https://hub.docker.com/r/rocker/tidyverse/tags"
    private: no  
  - name: R_tools
    prompt: "Enter the R package tool you require as a space-separated list if more than one, e.g. tool1 tool2 tool3. If irrelevant, just press enter"
    private: no
  - name: BiocManager_tools
    prompt: 'Enter the BiocManager tool you require, in the format (c(\"tool\")), as a comma-separated list if more than one, e.g. (c(\"tool1\",\"tool2\",\"tool3\")). If irrelevant, just press enter'
    private: no
  - name: container_name
    prompt: "Give the container a name (no capitals) (blank not accepted)"
    private: no
  - name: container_version
    prompt: "Give the container a version number"
    private: no
  - name: rstudio_password
    prompt: "Enter a new password for RStudio"
    private: no
  - name: pubkey_path
    prompt: "Enter the path to your ssh private key on your local machine, e.g. ~/.ssh/id_rsa.key"
    private: no
  tasks:
  - name: Print R version number
    shell: echo {{ R_version }}
    register: R_version_number
  - name: Dockerfile changes for R_version == 3.6.3
    shell: |
      cp Dockerfile Dockerfile-{{ container_name }}_{{ container_version }}
      echo "RUN mkdir /home/rstudio/library \
      && echo 'myPaths <- .libPaths(); myPaths <- c(myPaths, \"/home/rstudio/library\"); .libPaths(myPaths)' >> /usr/local/lib/R/library/base/R/Rprofile" >> Dockerfile-{{ container_name }}_{{ container_version }}
    become: yes
    when: R_version_number.stdout == "3.6.3"  
  - name: Dockerfile changes for R_version != 3.6.3
    shell: |
      cp Dockerfile Dockerfile-{{ container_name }}_{{ container_version }}
      echo "RUN sed -i '1488s|true|false|' /usr/lib/rstudio-server/resources/schema/user-prefs-schema.json" >> Dockerfile-{{ container_name }}_{{ container_version }} #to uncheck memory usage showing up
    when: R_version_number.stdout != "3.6.3" 
  - name: Completing the Dockerfile
    shell: |
      sed -i "s|tidyverse:4.0.3|tidyverse:{{ R_version }}|g" Dockerfile-{{ container_name }}_{{ container_version }}
      sed -i "s|caTools|caTools {{ R_tools }}|g" Dockerfile-{{ container_name }}_{{ container_version }}
      echo "RUN R -e 'library(BiocManager)' \
      && R -e 'BiocManager::install({{ BiocManager_tools }})'" >> Dockerfile-{{ container_name }}_{{ container_version }}
    args:
      warn: false
  - name: Building the Docker image
    command: docker build -f Dockerfile-{{ container_name }}_{{ container_version }} -t localhost:32000/{{ container_name }}:{{ container_version }} .
    become: yes
  # - name: Building the Singularity container
  #   command: singularity pull docker-daemon:{{ container_name }}:{{ container_version }}
  #   become: yes
  #   args:
  #     creates: "{{ container_name }}_{{ container_version }}.sif"
  - name: Push the Docker image to the registry
    command: docker push localhost:32000/{{ container_name }}:{{ container_version }}
    become: yes
  - name: Create RStudio server folder
    command: mkdir -p /tmp/rstudio-server
    args:  
      creates: /tmp/rstudio-server
  - name: Create a data folder
    command: mkdir /data
    become: yes
    args:
      creates: /data
  - name: Change ownership of data folder
    command: chown ubuntu:ubuntu /data
    become: yes
    args:
      warn: false
  - name: Add an RStudio application
    shell:
      cmd: sed -i 's/rstudio/{{ container_name }}/g' /home/ubuntu/microk8s-on-nimbus/rstudio-deployment.yaml && sed -i 's/rstudio-container/{{ container_name }}:{{ container_version }}/g' /home/ubuntu/microk8s-on-nimbus/rstudio-deployment.yaml && sed -i 's/rstudio_password/{{ rstudio_password }}/g' /home/ubuntu/microk8s-on-nimbus/rstudio-deployment.yaml && microk8s kubectl apply -f /home/ubuntu/microk8s-on-nimbus/rstudio-deployment.yaml && microk8s kubectl expose deployment rstudio-deployment --target-port=8787 --name=rstudio-server --type=NodePort
      creates: rstudio-server
      warn: false
    become: yes
  - name: Wait for Kubernetes to deploy service
    wait_for:
      timeout: 60
  - name: Run instructions script
    script: /home/ubuntu/microk8s-on-nimbus/ansible_scripts/add_rstudio_app.sh '{{ pubkey_path }}' '{{ rstudio_password}}'
    become: yes
    register: result_rstudio
  - name: Mount data volume
    command: mount /dev/vdc /data
    become: yes 
    args:
      creates: /data
  - name: Print RStudio server instructions
    debug: 
      var: result_rstudio.stdout_lines